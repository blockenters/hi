name: Build and Deploy Flask Container (SAM + API Gateway)

on:
  push:
    branches: [ "main" ]  # main 브랜치에 push 발생 시 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # (1) GitHub 저장소 코드 체크아웃
      - name: Check out code
        uses: actions/checkout@v2

      # (2) AWS 자격 증명 설정 (GitHub Secrets에서 가져옴)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2  # 서울 리전

      # (3) 환경 변수 설정
      - name: Set environment variables
        run: |
          # GitHub Secrets에서 값을 가져와 환경 변수로 설정
          echo "ECR_REPO_NAME=${{ secrets.ECR_REPO_NAME }}" >> $GITHUB_ENV
          echo "ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
          echo "AWS_REGION=ap-northeast-2" >> $GITHUB_ENV

      # (4) ECR 리포지토리 생성 (없는 경우)
      - name: Create ECR repository (if not exists)
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPO_NAME || \
          aws ecr create-repository --repository-name $ECR_REPO_NAME
        env:
          ECR_REPO_NAME: ${{ env.ECR_REPO_NAME }}
          AWS_REGION: ap-northeast-2

      # (5) ECR 로그인 (Docker 이미지 push를 위해)
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 \
          | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.ap-northeast-2.amazonaws.com
        env:
          ACCOUNT_ID: ${{ env.ACCOUNT_ID }}

      # (6) Docker 이미지 빌드 및 태그 설정
      - name: Build Docker image
        run: |
          # 타임스탬프를 이용한 유니크한 태그 생성
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "IMAGE_TAG=${TIMESTAMP}" >> $GITHUB_ENV
          
          # 로컬 태그로 빌드
          docker build -t $ECR_REPO_NAME .
          # ECR 푸시를 위한 태그 설정 (타임스탬프 태그 사용)
          docker tag $ECR_REPO_NAME:latest $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:${TIMESTAMP}
        env:
          ECR_REPO_NAME: ${{ env.ECR_REPO_NAME }}
          AWS_REGION: ${{ env.AWS_REGION }}
          ACCOUNT_ID: ${{ env.ACCOUNT_ID }}

      # (7) Docker 이미지를 ECR에 푸시
      - name: Push Docker image
        run: |
          docker push $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:${IMAGE_TAG}
        env:
          ECR_REPO_NAME: ${{ env.ECR_REPO_NAME }}
          AWS_REGION: ${{ env.AWS_REGION }}
          ACCOUNT_ID: ${{ env.ACCOUNT_ID }}

      # (8) AWS SAM CLI 설치
      - name: Install AWS SAM CLI
        run: |
          sudo pip install --ignore-installed aws-sam-cli

      # (9) SAM으로 Lambda 함수 배포
      - name: Deploy with SAM
        run: |
          # 새로운 이미지 URI 설정 (타임스탬프 태그 사용)
          IMAGE_URI="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:${IMAGE_TAG}"
          ECR_REPO_URI="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME"

          # SAM 배포 실행 (--force-upload 추가)
          sam deploy \
            --template-file template.yaml \
            --stack-name FlaskTranslateStack \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides ImageUri=$IMAGE_URI \
            --image-repository $ECR_REPO_URI \
            --force-upload \
            --no-fail-on-empty-changeset
        env:
          ECR_REPO_NAME: ${{ env.ECR_REPO_NAME }}
          AWS_REGION: ${{ env.AWS_REGION }}
          ACCOUNT_ID: ${{ env.ACCOUNT_ID }}
